import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("prog.txt\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	progLexer lex = new progLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	ccParser parser = new ccParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Double result=interpreter.visit(parseTree);
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double>
                  implements progVisitor<String> {
    // todo - Java will complain that "Interpreter" does not in fact
    // implement "implVisitor" at the moment.


	public String visitStart(ccParser.StartContext ctx){
	    return visit(ctx.hw, ctx.in, ctx.out, ctx.lat, ctx.de, ctx.up, ctx.sim);
	}


	public String visitAndExp(ccParser.AndExpContext ctx){
		String s1 = visit(ctx.e1);
		String s2 = visit(ctx.e2);

		return s1+" * "+s2;
	}
	public String visitAssignExp(ccParser.AssignExpContext ctx){
		String s1 = visit(ctx.x);
		String s2 = visit(ctx.e1);
		return s1+" = "+s2;
	}
	public String visitAssignFunction(ccParser.AssignFunctionContext ctx){
		String s1 = visit(ctx.f);
		String s2 = visit(ctx.s);
		return "";
	}
	public String visitAssignIdentFunc(ccParser.AssignIdentFuncContext ctx){
		String s1 = visit(ctx.f);
		String s2 = visit(ctx.x);
		return "";
	}
	public String visitBlockStatement(ccParser.BlockStatementContext ctx){
		String s1 = visit(ctx.s);
		return "{"+s1+"}";
	}
	public String visitConstExp(ccParser.ConstExpContext ctx){
		String s1 = visit(ctx.n);
		return "";
	}
	public String visitDef(ccParser.DefContext ctx){
		return "";
	}
	public String visitExp(ccParser.ExpContext ctx){
		return "";
	}
	public String visitExpressionList(ccParser.ExpressionsListContext ctx){
		return "";
	}
	public String visitExps(ccParser.ExpsContext ctx){
		return "";
	}
	public String visitFuncAssign(ccParser.FuncAssignContext ctx){
		return "";
	}
	public String visitFunc(ccParser.FuncContext ctx){
		return "";
	}
	public String visitFunctionCall(ccParser.FunctionCallContext ctx){
		return "";
	}
	public String visitIdentExp(ccParser.IdentExpContext ctx){
		return "";
	}
	public String visitInputs(ccParser.InputsContext ctx){
		return "";
	}
	public String visitLatches(ccParser.LatchesContext ctx){
		return "";
	}
	public String visitName(ccParser.NameContext ctx){
		return "";
	}
	public String visitNotExp(ccParser.NotExpContext ctx){
		return "";
	}
	public String visitOrExp(ccParser.OrExpContext ctx){
		return "";
	}
	public String visitOutputs(ccParser.OutputsContext ctx){
		return "";
	}
	public String visitParenthesizedExp(ccParser.ParenthesizedExpContext ctx){
		return "";
	}
	public String visitPlusExp(ccParser.PlusExpContext ctx){
		return "";
	}
	public String visitSiminputs(ccParser.SiminputsContext ctx){
		return "";
	}
	public String visitSingleArgFunctionCall(ccParser.SingleArgFunctionCallContext ctx){
		return "";
	}
	public String visitStmt(ccParser.StmtContext ctx){
		return "";
	}
	public String visitUpdates(ccParser.UpdatesContext ctx){
		return "";
	}


/*
 *Det her er fra undervisningen
 *
	public Double visitVariable(ccParser.VariableContext ctx){
	    System.err.println("Variables are not yet supported.\n");
	    System.exit(-1);
	    return null; }
	public Double visitAddSub(ccParser.AddSubContext ctx){
	    // e1=exp op=('+'|'-') e2=exp
	    System.out.println("Addition/Subtraction");
	    Double d1=visit(ctx.e1);
	    Double d2=visit(ctx.e2);
	    if (ctx.op.getText().equals("+")){
		System.out.println("Add "+d1+" + "+d2+" = "+(d1+d2));
		return d1+d2;
	    }
	    else{
		System.out.println("Sub "+d1+" - "+d2+" = "+(d1-d2));
		return d1-d2;
	    }
	}
	public Double visitConstant(ccParser.ConstantContext ctx){
	    String s=ctx.f.getText();
	    System.out.println("Constant "+s);
	    return Double.valueOf(s);
	}
	public Double visitParen(ccParser.ParenContext ctx){ return visit(ctx.e); }
	public Double visitMultDiv(ccParser.MultDivContext ctx){
	    System.out.println("Mult/Div");
	    Double d1=visit(ctx.e1);
	    Double d2=visit(ctx.e2);
	    if (ctx.op.getText().equals("*")){
		System.out.println("Mult "+d1+" * "+d2+" = "+(d1*d2));
		return d1*d2;
	    }
	    else{
		System.out.println("Div "+d1+" / "+d2+" = "+(d1/d2));				
		return d1/d2;
	    }

 */
    
	//}


}

