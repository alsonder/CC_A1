import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("prog.txt\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	progLexer lex = new progLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	progParser parser = new progParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Double result=interpreter.visit(parseTree);
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double>
                  implements progVisitor<String> {
    // todo - Java will complain that "Interpreter" does not in fact
    // implement "implVisitor" at the moment.


	public String visitStart(progParser.StartContext ctx){
	    return visit(ctx.e);
	}


	public String visitAndExp(progpParser.AndExpContext ctx){
		return "";
	}
	public String visitAssignExp(progpParser.AssignExpContext ctx){
		return "";
	}
	public String visitAssignFunction(progpParser.AssignFunctionContext ctx){
		return "";
	}
	public String visitAssignIdentFunc(progpParser.AssignIdentFuncContext ctx){
		return "";
	}
	public String visitBlockStatement(progpParser.BlockStatementContext ctx){
		return "";
	}
	public String visitConstExp(progpParser.ConstExpContext ctx){
		return "";
	}
	public String visitDef(progpParser.DefContext ctx){
		return "";
	}
	public String visitExp(progpParser.ExpContext ctx){
		return "";
	}
	public String visitExpressionList(progpParser.ExpressionListContext ctx){
		return "";
	}
	public String visitExps(progpParser.ExpsContext ctx){
		return "";
	}
	public String visitFuncAssign(progpParser.FuncAssignContext ctx){
		return "";
	}
	public String visitFunc(progpParser.FuncContext ctx){
		return "";
	}
	public String visitFunctionCall(progpParser.FunctionCallContext ctx){
		return "";
	}
	public String visitIdentExp(progpParser.IdentExpContext ctx){
		return "";
	}
	public String visitInputs(progpParser.InputsContext ctx){
		return "";
	}
	public String visitLatches(progpParser.LatchesContext ctx){
		return "";
	}
	public String visitName(progpParser.NameContext ctx){
		return "";
	}
	public String visitNotExp(progpParser.NotExpContext ctx){
		return "";
	}
	public String visitOrExp(progpParser.OrExpContext ctx){
		return "";
	}
	public String visitOutputs(progpParser.OutputsContext ctx){
		return "";
	}
	public String visitParenthesizedExp(progpParser.ParenthesizedExpContext ctx){
		return "";
	}
	public String visitPlusExp(progpParser.PlusExpContext ctx){
		return "";
	}
	public String visitSiminputs(progpParser.SiminputsContext ctx){
		return "";
	}
	public String visitSingleArgFunctionCall(progpParser.SingleArgFunctionCallContext ctx){
		return "";
	}
	public String visitStmt(progpParser.StmtContext ctx){
		return "";
	}
	public String visitUpdates(progpParser.UpdatesContext ctx){
		return "";
	}


/*
 *Det her er fra undervisningen
 *
	public Double visitVariable(progParser.VariableContext ctx){
	    System.err.println("Variables are not yet supported.\n");
	    System.exit(-1);
	    return null; }
	public Double visitAddSub(progParser.AddSubContext ctx){
	    // e1=exp op=('+'|'-') e2=exp
	    System.out.println("Addition/Subtraction");
	    Double d1=visit(ctx.e1);
	    Double d2=visit(ctx.e2);
	    if (ctx.op.getText().equals("+")){
		System.out.println("Add "+d1+" + "+d2+" = "+(d1+d2));
		return d1+d2;
	    }
	    else{
		System.out.println("Sub "+d1+" - "+d2+" = "+(d1-d2));
		return d1-d2;
	    }
	}
	public Double visitConstant(progParser.ConstantContext ctx){
	    String s=ctx.f.getText();
	    System.out.println("Constant "+s);
	    return Double.valueOf(s);
	}
	public Double visitParen(progParser.ParenContext ctx){ return visit(ctx.e); }
	public Double visitMultDiv(progParser.MultDivContext ctx){
	    System.out.println("Mult/Div");
	    Double d1=visit(ctx.e1);
	    Double d2=visit(ctx.e2);
	    if (ctx.op.getText().equals("*")){
		System.out.println("Mult "+d1+" * "+d2+" = "+(d1*d2));
		return d1*d2;
	    }
	    else{
		System.out.println("Div "+d1+" / "+d2+" = "+(d1/d2));				
		return d1/d2;
	    }

 */
    
	}


}

